#!/bin/bash

# post-receive hook to deploy node app

# bail if branch deleted
while read OLDSHA NEWSHA REF ; do
  if [[ "$NEWSHA" == "0000000000000000000000000000000000000000" ]]; then
    echo "Branch deleted, nothing to do"
    exit 0
  fi
done

# vars
GIT_DIR=/home/snap/repo
DEPLOY_BASE_PATH=/home/snap/snap
DATESTAMP=$(date +"%Y%m%d%H%M%S")
RELEASE_PATH="$DEPLOY_BASE_PATH/releases/$DATESTAMP"
CURRENT_PATH="$DEPLOY_BASE_PATH/current"
SHARED_PATH="$DEPLOY_BASE_PATH/shared"
LOG_PATH="$DEPLOY_BASE_PATH/shared/logs"
PRESTART_URL="https://snap-test.its.sfu.ca/isup"
PIDFILE="/var/run/nginx.pid"

echo "GIT_DIR: $GIT_DIR"
echo "DEPLOY_BASE_PATH: $DEPLOY_BASE_PATH"
echo "DATESTAMP: $DATESTAMP"
echo "RELEASE_PATH: $RELEASE_PATH"
echo "CURRENT_PATH: $CURRENT_PATH"
echo "SHARED_PATH: $SHARED_PATH"
echo "PRESTART_URL: $PRESTART_URL"

# create the release directory
echo "Create the release directory"
mkdir -p $RELEASE_PATH  || { echo "Error creating $RELEASE_PATH" ; exit 1; }

# check out files to release directory
echo "Check out files to release directory"
git --work-tree=$RELEASE_PATH --git-dir=$GIT_DIR checkout -f || { echo "Error checking out files" ; exit 1; }

# yarn install
echo "yarn install"
cd $RELEASE_PATH && yarn || { echo "Error running yarn" ; exit 1; }

# copy config files
echo "Symlink config files"
ln -s $SHARED_PATH/config/.env.production $RELEASE_PATH || { echo "Error symlinking .env.production" ; exit 1; }

# build the app
echo "building the app"
cd $RELEASE_PATH && NODE_ENV=production npm run build || { echo "Error building the app" ; exit 1; }
cd $RELEASE_PATH/public/assets && find . -name "*.html" | xargs sed -i '/^[[:space:]]*$/d' || { echo "Error stripping whitespcae from HTML files" ; exit 1; }

# symlink logs
ln -s $SHARED_PATH/log $RELEASE_PATH || { echo "Error symlinking logs" ; exit 1; }

# move symlink
echo "Move symlink"
rm -f $CURRENT_PATH || { echo "Error removing current symlink" ; exit 1; }
ln -s $RELEASE_PATH $CURRENT_PATH || { echo "Error making symlink" ; exit 1; }

# run migrations
echo "Run DB Migrations"
cd $CURRENT_PATH && NODE_ENV=production npm run db:migrate

# start or restart
if [ -e "$PIDFILE" ]; then
  # pidfile exists, so app should be running; try to restart it
  echo "App running; restarting app"
  /usr/bin/passenger-config restart-app $DEPLOY_BASE_PATH
else
  # pidfile does not exist, so app is not running; start it
  echo "Nginx is not running; you must start it manually as root (systemctl start nginx)"
  exit 1
fi

curl $PRESTART_URL || { echo "Error hitting $PRESTART_URL" ; exit 1; }

# delete old releases
echo "Cleaning up old releases"
cd "$DEPLOY_BASE_PATH/releases" && (ls -t | head -n 5; ls) | sort | uniq -u | xargs rm -rf
